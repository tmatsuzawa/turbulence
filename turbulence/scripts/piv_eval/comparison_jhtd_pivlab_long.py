"""
Generates plots comparing coarse-grained jhtd data with pivlab outptus
"""

import argparse
import glob
import os
import numpy as np
import h5py
from scipy.optimize import curve_fit
import matplotlib.ticker as ticker
import matplotlib.pyplot as plt
import library.tools.rw_data as rw
import turbulence.jhtd.get as jhtd_get
import turbulence.jhtd.tools as jhtd_tools
import library.basics.formatarray as fa
import library.basics.formatstring as fs
import library.display.graph as graph

parser = argparse.ArgumentParser(description='Make a hdf5 file out of PIVLab txt outputs')
parser.add_argument('-datadir', '--datadir', help='Parent directory of PIVlab output HDF5 directories', type=str,
                    default='/Volumes/bigraid/takumi/turbulence/JHTD/synthetic_data/hdf5data/post_processed/')
parser.add_argument('-jhtd', '--jhtddatapath', help='full path to jhtd data', type=str,
                    default='/Volumes/bigraid/takumi/turbulence/JHTD/isotropic1024coarse_t0_0_tl_2507_x0_0_xl_1024_y0_0_yl_1024_z0_462_zl_101_tstep_20_xstep_1_ystep_1_zstep_1.h5')

args = parser.parse_args()

def get_jhtd_parameters(filename):
    keys = ['t0', 'tl', 'x0', 'xl', 'y0', 'yl', 'z0', 'zl', 'tstep', 'xstep', 'ystep', 'zstep']
    print filename
    param = {}
    for key in keys:
        try:
            param[key] = int(fs.get_float_from_str(filename, key + '_', '_'))
        except RuntimeError:
            print '... RuntimeError raised. Try something else...'
            param[key] = int(fs.get_float_from_str(filename, key + '_', '.h5'))
            print '... Worked. '
    return param


# Data architecture
jhtddatapath = args.jhtddatapath
pivdatadir = args.datadir
parentdir = os.path.dirname(pivdatadir)


# Plotting settings
cmap = 'RdBu'
# cmap = 'magma'
params = {'figure.figsize': (20, 20)
          }
graph.update_figure_params(params)

# jhtd parameters
param = get_jhtd_parameters(jhtddatapath)
# dx = 2 * np.pi / 1024. # unit length / px
dy = dz = dx = 1 # in px
dt_sim = 0.0002  # DNS simulation time step
if 'coarse' in jhtddatapath:
    dt_spacing = 10
else:
    dt_spacing = 1
dt = dt_sim * param['tstep'] * dt_spacing # time separation between data points in JHTD time unit
nu = 0.000185  # viscosity (unit length ^2 / unit time)
fx = (2 * np.pi) / 1024 # unit length / px

print 'dt, param[tstep], dt_spacing:', dt, param['tstep'], dt_spacing

# Make convienient lists about time and space
T = range(param['t0'] * dt_spacing, param['tl'] * dt_spacing, param['tstep'] * dt_spacing)
X = range(param['x0'], param['x0'] + param['xl'], param['xstep'])
Y = range(param['y0'], param['y0'] + param['yl'], param['ystep'])
Z = range(param['z0'], param['z0'] + param['zl'], param['zstep'])
zpos = (param['zl']+1)/2
tdim, zdim, ydim, xdim = len(T), len(Z), len(Y), len(X)
# mesh grid for pcolormesh
xx, yy = np.meshgrid(X, Y)

# Plotting settings 2
# Conversion between JHTD unit system and PIVLab unit system
# vmax = np.pi (length unit / time unit) = 512 (px/time unit) = 512 px/time unit * (1 time unit / 5000 DNS steps) * (param['tstep'] * dt_spacing DNS step  / 1 frame)
# 1 frame = param['tstep'] * dt_spacing  DNS steps
vmax = max(param['xl'], param['yl']) / 2 * dt_sim * (param['tstep'] * dt_spacing) # px/frame
vmin = - vmax

# PIVLab outputs
pivlab_outputs = glob.glob(pivdatadir + 'tstep%d/*.h5' % param['tstep']) # generated by pivlab2hdf5.py

# File architecture 2
resultdir = os.path.join(parentdir + '/tstep%d' % param['tstep'], '/comp_jhtd_pivlab/')


# Processing starts now...


# Load jhtd data
# jhtd_data[vel_key] has a structure (z, y, x, ui)... vel_key is time
jhtd_data = h5py.File(args.jhtddatapath, mode='r')
vel_keys = [jhtd_key for jhtd_key in jhtd_data.keys() if jhtd_key.startswith('u')]

for i, pivlab_output in enumerate(pivlab_outputs):
    print pivlab_output
    # File architecture 2
    resultsubdirname = fs.get_filename_wo_ext(pivlab_output)
    resultdir = os.path.join(parentdir + '/tstep%d' % param['tstep'], 'comp_jhtd_pivlab/' + resultsubdirname)


    iw = int(fs.get_float_from_str(pivlab_output, 'W', 'pix'))  # size of final interrogation window in multi-pass
    lt = fs.get_float_from_str(pivlab_output, 'lt', '_')  # laser thickness in px
    npt = int(fs.get_float_from_str(pivlab_output, 'npt', '_'))  # number of particles used to generate fake piv images
    fwhm = lt / np.sqrt(2) # fwhm of a gaussian beam

    # field averaged over illuminated plane thickness
    print 'Center of illuminated plane %d, FWHM of a Gaussian beam: %.2f' % (zpos, fwhm)
    z_start, z_end = max(int(zpos - fwhm/2), 0), min(int(zpos + fwhm/2), zdim-1)
    print 'z of illuminatied volume: [%d, %d] (px)' % (z_start, z_end)


    # graph.color_plot(xx, yy, ux_mean, fignum=1)
    # graph.color_plot(xx, yy, ux_center, fignum=2)

    # Load pivlab-processed data
    # piv_data has a structure (x, y, t)
    piv_data = h5py.File(pivlab_output, mode = 'r')

    for t in range(piv_data['ux'].shape[2]):
        print '%d / %d' % (t, piv_data['ux'].shape[2])
        # jhtd averaged field
        # uz_mean = np.nanmean(jhtd_data[vel_keys[t]][z_start:z_end, ..., 0], axis=0)
        uy_mean = np.nanmean(jhtd_data[vel_keys[t]][z_start:z_end, ..., 1], axis=0) / fx * dt # unit length/unit time -> px/frame
        ux_mean = np.nanmean(jhtd_data[vel_keys[t]][z_start:z_end, ..., 2], axis=0) / fx * dt # unit length/unit time -> px/frame
        # jhtd field at the center of illuminated plane
        # uz_center = jhtd_data[vel_keys[t]][zpos, ..., 0]
        uy_center = jhtd_data[vel_keys[t]][zpos, ..., 1] / fx * dt # px/unit time -> px/frame
        ux_center = jhtd_data[vel_keys[t]][zpos, ..., 2] / fx * dt # px/unit time -> px/frame

        # Coarse-grain
        nrows_sub, ncolumns_sub = iw, iw # number of pixels to average over
        xx_coarse = fa.coarse_grain_2darr_overwrap(xx, nrows_sub, ncolumns_sub, overwrap=0.5)
        yy_coarse = fa.coarse_grain_2darr_overwrap(yy, nrows_sub, ncolumns_sub, overwrap=0.5)
        ux_mean_coarse = fa.coarse_grain_2darr_overwrap(ux_mean, nrows_sub, ncolumns_sub, overwrap=0.5)
        uy_mean_coarse = fa.coarse_grain_2darr_overwrap(uy_mean, nrows_sub, ncolumns_sub, overwrap=0.5)
        ux_center_coarse = fa.coarse_grain_2darr_overwrap(ux_center, nrows_sub, ncolumns_sub, overwrap=0.5)
        uy_center_coarse = fa.coarse_grain_2darr_overwrap(uy_center, nrows_sub, ncolumns_sub, overwrap=0.5)

        # pivlab outputs
        ux_pivlab, uy_pivlab = np.array(piv_data['ux']), np.array(piv_data['uy']) # px / frame
        xx_pivlab, yy_pivlab = np.array(piv_data['x']), np.array(piv_data['y'])

        # PLOTTING
        # Fig 1: Comparison between PIVLab outputs and a field from JHTD at the center of the illuminated plane
        # PIVLab Outputs
        fig1, ax11, cc11 = graph.color_plot(xx_pivlab, yy_pivlab, ux_pivlab[..., t], cmap=cmap, vmin=vmin, vmax=vmax, fignum=1, subplot=331)
        fig1, ax14, cc14 = graph.color_plot(xx_pivlab, yy_pivlab, uy_pivlab[..., t], cmap=cmap, vmin=vmin, vmax=vmax, fignum=1, subplot=334)
        # Fields from JHTD
        fig1, ax12, cc12 = graph.color_plot(xx_coarse, yy_coarse, ux_center_coarse, cmap=cmap, vmin=vmin, vmax=vmax, fignum=1, subplot=332)
        fig1, ax15, cc15 = graph.color_plot(xx_coarse, yy_coarse, uy_center_coarse, cmap=cmap, vmin=vmin, vmax=vmax, fignum=1, subplot=335)
        # Difference (error)
        fig1, ax13, cc13 = graph.color_plot(xx_coarse, yy_coarse, ux_pivlab[..., t] - ux_center_coarse, cmap=cmap, vmin=vmin, vmax=vmax, fignum=1, subplot=333)
        fig1, ax16, cc16 = graph.color_plot(xx_coarse, yy_coarse, uy_pivlab[..., t] - uy_center_coarse, cmap=cmap, vmin=vmin, vmax=vmax, fignum=1, subplot=336)
        # PDF
        nbins = int(np.sqrt(ux_center_coarse.shape[0] * ux_center_coarse.shape[1]))
        fig1, ax17 = graph.pdf(ux_pivlab[..., t], nbins=nbins, fignum=1, subplot=337, label=r'$U_x$')
        fig1, ax17 = graph.pdf(uy_pivlab[..., t], nbins=nbins, fignum=1, subplot=337, label=r'$U_y$')
        fig1, ax18 = graph.pdf(ux_center_coarse, nbins=nbins,  fignum=1, subplot=338, label=r'$U_x$')
        fig1, ax18 = graph.pdf(uy_center_coarse, nbins=nbins,  fignum=1, subplot=338, label=r'$U_y$')
        fig1, ax19 = graph.pdf(ux_pivlab[..., t] - ux_center_coarse, nbins=nbins,  fignum=1, subplot=339, label=r'$\Delta U_x$')
        fig1, ax19 = graph.pdf(uy_pivlab[..., t] - uy_center_coarse, nbins=nbins,  fignum=1, subplot=339, label=r'$\Delta U_y$')


        fig2, ax21, cc21 = graph.color_plot(xx_pivlab, yy_pivlab, ux_pivlab[..., t], cmap=cmap, vmin=vmin, vmax=vmax, fignum=2, subplot=331)
        fig2, ax24, cc24 = graph.color_plot(xx_pivlab, yy_pivlab, uy_pivlab[..., t], cmap=cmap, vmin=vmin, vmax=vmax, fignum=2, subplot=334)
        # Fields from JHTD
        fig2, ax22, cc22 = graph.color_plot(xx_coarse, yy_coarse, ux_mean_coarse, cmap=cmap, vmin=vmin, vmax=vmax, fignum=2, subplot=332)
        fig2, ax25, cc25 = graph.color_plot(xx_coarse, yy_coarse, uy_mean_coarse, cmap=cmap, vmin=vmin, vmax=vmax, fignum=2, subplot=335)
        # Difference (error)
        fig2, ax23, cc23 = graph.color_plot(xx_coarse, yy_coarse, ux_pivlab[..., t] - ux_center_coarse, cmap=cmap, vmin=vmin, vmax=vmax, fignum=2, subplot=333)
        fig2, ax26, cc26 = graph.color_plot(xx_coarse, yy_coarse, uy_pivlab[..., t] - uy_center_coarse, cmap=cmap, vmin=vmin, vmax=vmax, fignum=2, subplot=336)
        # PDF
        fig2, ax27 = graph.pdf(ux_pivlab[..., t], nbins=nbins,  fignum=2, subplot=337, label=r'$U_x$')
        fig2, ax27 = graph.pdf(uy_pivlab[..., t], nbins=nbins,  fignum=2, subplot=337, label=r'$U_y$')
        fig2, ax28 = graph.pdf(ux_mean_coarse, nbins=nbins,  fignum=2, subplot=338, label=r'$U_x$')
        fig2, ax28 = graph.pdf(uy_mean_coarse, nbins=nbins,  fignum=2, subplot=338, label=r'$U_y$')
        fig2, ax29 = graph.pdf(ux_pivlab[..., t] - ux_mean_coarse, nbins=nbins,  fignum=2, subplot=339, label=r'$\Delta U_x$')
        fig2, ax29 = graph.pdf(uy_pivlab[..., t] - uy_mean_coarse, nbins=nbins,  fignum=2, subplot=339, label=r'$\Delta U_y$')

        cc1s = [cc11, cc12, cc13, cc14, cc15, cc16, None, None, None]
        cc2s = [cc21, cc22, cc23, cc24, cc25, cc26, None, None, None]
        ax1s = [ax11, ax12, ax13, ax14, ax15, ax16, ax17, ax18, ax19]
        ax2s = [ax21, ax22, ax23, ax24, ax25, ax26, ax27, ax28, ax29]
        add_legends = [False, False, False, False, False, False, True, True, True]
        add_cbs = [True, True, True, True, True, True, False, False, False]
        xlabels = [r'$X$ (px)'] * 6 + [r'$U_i$ (px/frame)', r'$U_i$ (px/frame)', r'$\Delta U_i$ (px/frame)']
        ylabels = [r'$Y$ (px)'] * 6 + ['Probabilistic density'] * 3
        clabels = [r'$U_x$ (px/frame)', r'$U_x$ (px/frame)', r'$\Delta U_x$ (px/frame)',
                   r'$U_y$ (px/frame)', r'$U_y$ (px/frame)', r'$\Delta U_y$ (px/frame)', None, None, None]

        # Prepare Fig 1
        for ax, cc, xlabel, ylabel, clabel, add_legend, add_cb in zip(ax1s, cc1s, xlabels, ylabels, clabels, add_legends, add_cbs):
            graph.labelaxes(ax, xlabel, ylabel)
            if add_cb:
                graph.add_colorbar(cc, ax=ax, label=clabel)
            if add_legend:
                ax.legend()
            if ax in [ax17, ax18, ax19]:
                # graph.setaxes(ax, -16, 16, -0.005, 0.18)
                ax.set_xlim(-vmax, vmax)
            else:
                ax.set_facecolor('k')

        # Prepare Fig 2
        for ax, cc, xlabel, ylabel, clabel, add_legend, add_cb in zip(ax2s, cc2s, xlabels, ylabels, clabels, add_legends, add_cbs):
            graph.labelaxes(ax, xlabel, ylabel)
            if add_cb:
                graph.add_colorbar(cc, ax=ax, label=clabel)
            if add_legend:
                ax.legend()
            if ax in [ax27, ax28, ax29]:
                # graph.setaxes(ax, -16, 16, -0.005, 0.18)
                ax.set_xlim(-vmax, vmax)
            else:
                ax.set_facecolor('k')
        title = r'$W = {0:d}$ px, FWHM={1:.1f} px, $D=$3px, $N={2:d}$, $Re_\lambda$=420, $t={3:05.3f}$, 1 frame={4:.3f}'.format(iw, fwhm, npt, t * dt_sim * param['tstep'] * dt_spacing, dt_sim * param['tstep'] * dt_spacing)
        graph.suptitle(title, fignum=1)
        graph.suptitle(title, fignum=2)
        fig1.tight_layout()
        fig2.tight_layout()

        imgfilename1 = 'comp_pivlab_and_jhtd_field_at_center_of_illum_plane/' \
                       'comp_pivlab_and_jhtd_field_at_center_of_illum_planeim_{0:04d}'.format(t)
        imgfilename2 = 'comp_pivlab_and_jhtd_field_avg_over_illum_volume_in_z_direction/' \
                       'comp_pivlab_and_jhtd_field_avg_over_illum_volume_in_z_directionim_{0:04d}'.format(t)

        # Save
        graph.save(os.path.join(resultdir, imgfilename1), fignum=1, ext='png')
        graph.save(os.path.join(resultdir, imgfilename2), fignum=2, ext='png')
        plt.close('all')

    piv_data.close()


graph.show()

jhtd_data.close()

print 'Done'


# with h5py.File(args.jhtddatapath) as jhtd_data:
#     # jhtd_data[vel_key] has a structure (z, y, x, ui)
#     vel_keys = [jhtd_key for jhtd_key in jhtd_data.keys() if jhtd_key.startswith('u')]
#     uz0 = jhtd_data[vel_keys[0]][..., 0]
#     # Initialize
#     # uz_jhtd, uy_jhtd, ux_jhtd = np.empty((tdim, zdim, ydim, xdim)), np.empty((tdim, zdim, ydim, xdim)), np.empty((tdim, zdim, ydim, xdim))
#     # uz_jhtd[:], uy_jhtd[:], ux_jhtd[:] = np.nan, np.nan, np.nan
#     # for i, vel_key in enumerate(vel_keys):
#     #     print 'Preparing velocity field in JHTD... %d / %d' % (i+1, len(vel_keys))
#     #     uz_jhtd[i, ...], uy_jhtd[i, ...], ux_jhtd[i, ...] = jhtd_data[vel_key][..., 0], jhtd_data[vel_key][..., 1], jhtd_data[vel_key][..., 2]
#


#
# # Coarse-grain data
# iw =
# nrows_sub, ncolumns_sub = args.iw, args.iw # number of pixels to average over
# xx_coarse = fa.coarse_grain_2darr_overwrap(xx, nrows_sub, ncolumns_sub, overwrap=0.5)
# yy_coarse = fa.coarse_grain_2darr_overwrap(yy, nrows_sub, ncolumns_sub, overwrap=0.5)
# ux0_coarse = fa.coarse_grain_2darr_overwrap(ux0, nrows_sub, ncolumns_sub, overwrap=0.5)
# uy0_coarse = fa.coarse_grain_2darr_overwrap(uy0, nrows_sub, ncolumns_sub, overwrap=0.5)
# uz0_coarse = fa.coarse_grain_2darr_overwrap(uz0, nrows_sub, ncolumns_sub, overwrap=0.5)
#
# fig1, ax11, cc11 = graph.color_plot(xx, yy, ux0, cmap=cmap,vmin=-2, vmax=2,  fignum=1, subplot=221)
# fig1, ax12, cc12 = graph.color_plot(xx_coarse, yy_coarse, ux0_coarse, cmap=cmap, vmin=-2, vmax=2,  fignum=1, subplot=222)
# fig1, ax13, cc13 = graph.color_plot(xx_coarse, yy_coarse, uy0_coarse, cmap=cmap, vmin=-2, vmax=2,  fignum=1, subplot=223)
# fig1, ax14, cc14 = graph.color_plot(xx_coarse, yy_coarse, uz0_coarse, cmap=cmap, vmin=-2, vmax=2,  fignum=1, subplot=224)
# axes1 = [ax11, ax12, ax13, ax14]
# ccs1 = [cc11, cc12, cc13, cc14]
# titles1 = ['Original $U_x$', 'Coarse-grained $U_x$',  'Coarse-grained $U_y$',  'Coarse-grained $U_z$']
# for ax, cc, title in zip(axes1, ccs1, titles1):
#     graph.add_colorbar(cc, ax=ax)
#     graph.title(ax, title)
#     graph.setaxes(ax, 0, 2*np.pi, 0, 2*np.pi)
#     graph.labelaxes(ax, '$X$ (a.u.)', '$Y$ (a.u.)')
#     if cmap == 'RdBu':
#         ax.set_facecolor('k')
# graph.suptitle('JHTD')
# filename = 'jhtd_vel_fields_%s' %cmap
# graph.save(resultdir + filename)
# plt.close()