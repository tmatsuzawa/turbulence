"""
Make a velocity field generated by a pair of two opposite Lamb-Oseen vortices

"""
import os
import numpy as np
import argparse

import library.basics.formatstring as fs
import library.display.graph as graph
import library.tools.vectools as vec
import library.tools.rw_data as rw

parser = argparse.ArgumentParser(description='Generate a velocity field by a pair of Lamb-Oseen vorticies')
parser.add_argument('-gamma', '--gamma', help='Circulation in mm^2/s', type=float, default=17000)
parser.add_argument('-a', '--a', help='core diameter used for lamb-oseen vortex in mm', type=float, default=8)
parser.add_argument('-d', '--d', help='separation between opposite lamb-oseen vorticies in mm. The negative LO vortex will be at (cx, cy+d).', type=float, default=150)
parser.add_argument('-cx', '--cx', help='x-coord of positive LO vortex in px', type=float, default=640)
parser.add_argument('-cy', '--cy', help='y-coord of positive LO vortex in px', type=float, default=400)
parser.add_argument('-fps', '--fps', help='frame rate... used to convert circulation into px^2/frame', type=float, default=500)
parser.add_argument('-w', '--width', help='width of generated velocity field ', type=int, default=1280)
parser.add_argument('-h', '--height', help='height of generated velocity field ', type=int, default=800)
parser.add_argument('-scale', '--scale', help='px-to-mm conversion factor (mm/px).', type=float, default=0.2)
# string input
parser.add_argument('--usestr', dest='use_strinput', action='store_true', default=False,
                    help='Use a given string for parameter extraction')
parser.add_argument('-str', '--paramstr', help='String used for parameter extraction. default is a directory name.', type=str,
                    default='/Volumes/labshared3-1/takumi/JHTD-sample/JHT_Database/Data/synthetic_data_from_bob/double_oseen_PIV_gamma17000_NP50000_r40_D150_cx640_cy400_fps500_w1280_h800_psize3_dx200')

args = parser.parse_args()

if args.use_strinput:
    # File architecture
    filedir = args.paramstr
    try:
        dirname = os.path.split(filedir)[1]
        savedir = os.path.join(filedir, 'vel_field/')
    except:
        savedir = './vel_field/'

    # Parameter extraction
    gamma = fs.get_float_from_str(dirname, 'gamma', '_NP') # mm^2/s
    rr = fs.get_float_from_str(dirname, '_r', '_D') / 10. # core radius of vortex # mm
    dd = fs.get_float_from_str(dirname, '_D', '_cx') # spacing between two vortices # mm
    npts = fs.get_float_from_str(dirname, 'NP', '_r')
    cx = fs.get_float_from_str(dirname, 'cx', '_cy') # px
    cy = fs.get_float_from_str(dirname, 'cy', '_fps') # px
    fps = fs.get_float_from_str(dirname, 'fps', '_w12') # frame per sec
    width = fs.get_float_from_str(dirname, '_w', '_h') # px
    height = fs.get_float_from_str(dirname, '_h', '_psize') # px
    dx = fs.get_float_from_str(dirname, 'dx', '') / 1000.  # mm/px

# Convert mm,s -> px, frame
gamma_px2frame = gamma / dx / dx / fps
dd_px = dd / dx
rr_px = rr / dx
#
# print gamma_px2frame, rr, rr_px, dd, dd_px, cx, cy, width, height, dx

xx, yy = np.arange(width), np.arange(height)
xgrid, ygrid = np.meshgrid(xx, yy)

def lamb_oseen(gamma, rcore, x, y, xc, yc):
    r = np.sqrt((x-xc)**2 + (y-yc)**2)
    theta = np.arctan2( (y - yc), (x - xc))
    v_axial = gamma / (2*np.pi*r) * (1 - np.exp(-r**2 / rcore**2))
    u = v_axial * (-np.sin(theta))
    v = v_axial * np.cos(theta)
    return u, v

# Generate a velocity field
ugrid1, vgrid1 = lamb_oseen(gamma_px2frame, rr_px, xgrid, ygrid, cx, cy)
ugrid2, vgrid2 = lamb_oseen(-gamma_px2frame, rr_px, xgrid, ygrid, cx, cy+dd_px)
ugrid, vgrid = ugrid1 + ugrid2, vgrid1 + vgrid2
udata = np.stack((ugrid1, vgrid1))
omega = vec.curl(udata)

fig1, ax11, cc11 = graph.color_plot(xgrid, ygrid, ugrid, fignum=1, subplot=121, figsize=(16, 8))
fig1, ax12, cc12 = graph.color_plot(xgrid, ygrid, vgrid, fignum=1, subplot=122, figsize=(16, 8))
fig2, ax2, cc2 = graph.color_plot(xgrid, ygrid, omega, fignum=2)
# print np.nansum(omega), gamma / np.nansum(omega)

graph.add_colorbar(cc11, ax=ax11, label=r'$U_x$ (px/frame)')
graph.add_colorbar(cc12, ax=ax12, label=r'$U_y$ (px/frame)')
graph.add_colorbar(cc2, ax=ax2, label=r'$\omega_z$ (1/frame)')

graph.labelaxes(ax11, r'$X$', r'$Y$')
graph.labelaxes(ax12, r'$X$', r'$Y$')
graph.labelaxes(ax2, r'$X$', r'$Y$')
fig1.tight_layout()
fig2.tight_layout()


fig3, ax31 = graph.pdf(ugrid, nbins=200, fignum=3, subplot=121, figsize=(16, 8))
fig3, ax32 = graph.pdf(vgrid, nbins=200, fignum=3, subplot=122, figsize=(16, 8))
graph.labelaxes(ax31, r'$U_x$ (px/frame)', 'Probability density')
graph.labelaxes(ax32, r'$U_y$ (px/frame)', 'Probability density')
fig3.tight_layout()

filename = 'lamb_oseen_vortex_ux_uy'
filepath = os.path.join(savedir + filename)
graph.save(filepath, fignum=1)

filename = 'lamb_oseen_vortex_omegaz'
filepath = os.path.join(savedir + filename)
graph.save(filepath, fignum=2)

filename = 'lamb_oseen_vortex_ux_uy_pdf'
filepath = os.path.join(savedir + filename)
graph.save(filepath, fignum=3)


# Output velocity/vorticity field in hdf5
data = {}
data['x'] = xgrid  # px
data['y'] = ygrid  # px
data['ux'] = ugrid  # px/frame
data['uy'] = vgrid  # px/frame
data['omega'] = omega  #1/frame

hdf5dir = os.path.join(filedir, 'hdf5data/')
filename = dirname
rw.write_hdf5_dict(hdf5dir + filename, data)


graph.show()